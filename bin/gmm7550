#!/usr/bin/env python3
'''Command line tool to program, test, and control GMM-7550 module
connected via HAT adapter board to a VisionFive or Raspberry Pi SBC'''

__version__ = '0.1.0'

import time
import argparse
import gmm7550

parser = argparse.ArgumentParser(description = __doc__)

############################################################
#  Common options
############################################################

parser.add_argument('-V', '--version', action='version', version = '%(prog)s: ' + __version__ + ', GMM-7550 control library: ' + '0.1.0')
# parser.add_argument('-V', '--version', action='version', version = '%(prog)s: ' + __version__ + ', GMM-7550 control library: ' + gmm7550.__version__)

parser.add_argument('-v', '--verbose', action='store_true', help='be more verbose')

parser.add_argument('-c', '--config', type=str, choices=['visionfive', 'rpi', 'sim'],
                    default='visionfive',
                    help='select target hardware configuration')

parser.add_argument('-p', '--pll-page', type=int, choices=[0, 1],
                    default=0,
                    help='PLL configuration EEPROM page')

cmd = parser.add_subparsers(title='Commands',
                            # dest='cmd',
                            )

############################################################
#  Commands
############################################################

command = { c : cmd.add_parser(c) for c in [
    'power',
    'on', 'off',
    'reset',
    'pll',
    'id',
]}

############################################################
#  Power
############################################################

command['on'].set_defaults(func = lambda gmm, args: gmm.start())
command['off'].set_defaults(func = lambda gmm, args: gmm.poweroff())

############################################################
#  PLL
############################################################

c = command['pll']

c.add_argument('-c', '--configure',
               action='store_true',
               help='Configure PLL register')
c.add_argument('-p', '--program',
               help='Program PLL EEPROM page',
               dest='pll_program',
               type=int, choices=[0, 1], default=None)

def cmd_pll(gmm, args):
    print(" PLL \n-----\n", args)
    gmm.start()
    time.sleep(0.5)
    print(gmm.pll.read_eeprom_string())
    gmm.poweroff()

c.set_defaults(func = cmd_pll)

############################################################

if __name__ == '__main__':
    args = parser.parse_args()
    config = gmm7550.Config(args.config)
    gmm = gmm7550.GMM7550(config)

    if 'func' in vars(args):
        args.func(gmm, args)
    else:
        print(args)
