#!/usr/bin/env python3
'''Command line tool to program, test, and control GMM-7550 module
connected via HAT adapter board to a VisionFive or Raspberry Pi SBC'''

__version__ = '0.1.0'

import time
import argparse
import gmm7550

parser = argparse.ArgumentParser(description = __doc__)

############################################################
#  Common options
############################################################

parser.add_argument('-V', '--version', action='version', version = '%(prog)s: ' + __version__ + ', GMM-7550 control library: ' + '0.1.0')
# parser.add_argument('-V', '--version', action='version', version = '%(prog)s: ' + __version__ + ', GMM-7550 control library: ' + gmm7550.__version__)

parser.add_argument('-v', '--verbose', action='store_true', help='be more verbose')

parser.add_argument('-c', '--config', type=str, choices=['visionfive', 'rpi', 'sim'],
                    default='rpi',
                    help='select target hardware configuration')

parser.add_argument('-p', '--pll-page', type=int, choices=[0, 1],
                    default=0,
                    help='PLL configuration EEPROM page')

parser.add_argument('-s', '--spi-sel', type=int,
                    choices=range(16), metavar='{0..15}',
                    default=0,
                    help='select SPI multiplexer configuration')

cmd = parser.add_subparsers(title='Commands',
                            # dest='cmd',
                            )

############################################################
#  Commands
############################################################

command = { c : cmd.add_parser(c) for c in [
    'power',
    'on', 'off',
    'reset',
    'pll',
    'spi',
    'id',
]}

############################################################
#  Power
############################################################

command['on'].set_defaults(func = lambda gmm, args: gmm.start())
command['off'].set_defaults(func = lambda gmm, args: gmm.poweroff())

############################################################
#  PLL
############################################################

c = command['pll']

c.epilog = 'Without any option: print PLL current configuration registers\n'

c.add_argument('-e', '--eeprom',
               action='store_true',
               help='Print content of the PLL configuration EEPROM')
# c.add_argument('-c', '--configure',
#                action='store_true',
#                help='Configure PLL register')
c.add_argument('-P', '--program',
               help='Program PLL EEPROM page',
               dest='pll_program',
               type=int, choices=[0, 1], default=None)

def prog_page(g, page):
    from gmm7550.cdce6214_eeprom import page0_gmm
    g.pll.write_eeprom_page(page, page0_gmm)

def cmd_pll(gmm, args):
    gmm.start()
    time.sleep(0.5)
    if args.pll_program == None:
        if args.eeprom:
            print(gmm.pll.eeprom_as_string())
        else:
            print(gmm.pll.configuration_as_string())
    else:
        prog_page(gmm, args.pll_program)
    # time.sleep(0.1)
    # gmm.poweroff()

c.set_defaults(func = cmd_pll)

############################################################
#  SPI
############################################################

c = command['spi']

c.add_argument('-i', '--info',
               action='store_true',
               dest='spi_info',
               help='Print SPI device info')

c.add_argument('-r', '--read',
               action='store_true',
               dest='spi_read',
               help='Read SPI NOR page(s) to file')

c.add_argument('-w', '--write',
               action='store_true',
               dest='spi_write',
               help='Write data from file to SPI NOR starting from the given page number')

c.add_argument('-e', '--erase',
               action='store_true',
               dest='spi_erase',
               help='Erase SPI NOR page(s)')

c.add_argument('-p', '--page',
               dest='spi_page', metavar='{page|from,to}',
               help='Use SPI NOR page or page range'
              )

c.add_argument('-f', '--file',
               help='Filename to read/write SPI NOR data'
              )

def cmd_spi(gmm, args):
    if not (args.spi_info or args.spi_read or
            args.spi_write or args.spi_erase):
        print('At least one action [info/read/write/erase] should be specified')
        return
    if args.spi_page is None:
        spi_start_page = 0
        spi_end_page = spi_start_page
    else:
        _pages = args.spi_page.split(',')
        if len(_pages) == 1:
            spi_start_page = int(_pages[0])
            spi_end_page = spi_start_page
        else:
            spi_start_page = int(_pages[0])
            spi_end_page = int(_pages[1])
    if (args.spi_read or args.spi_write) and (args.file is None):
        print('SPI NOR read and write operations require file to be specified with --file (-f)')
        return

    gmm.start()
    time.sleep(0.1)

    if args.spi_info:
        gmm.spi.print_info()

    if args.spi_erase:
        gmm.spi.sector_erase(0)

    if args.spi_write:
        with open(args.file, mode='br') as f:
            data = f.read()
        print(len(data))
        gmm.spi.write_page(0, [0x12, 0x34, 0x56, 0x78])

    if args.spi_read:
        s = ""
        for b in gmm.spi.read(0, 16):
            s += "%02x " % b
        print(s)

    gmm.poweroff()

c.set_defaults(func = cmd_spi)

############################################################

if __name__ == '__main__':
    args = parser.parse_args()
    config = gmm7550.Config(args.config)
    config.pll_page = args.pll_page
    config.spi_sel = args.spi_sel
    gmm = gmm7550.GMM7550(config)

    if 'func' in vars(args):
        args.func(gmm, args)
    else:
        print(args)
