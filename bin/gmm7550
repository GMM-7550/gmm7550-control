#!/usr/bin/env python3
#
# This file is a part of the GMM-7550 Control library
# <https://github.com/ak-fau/gmm7550-control.git>
#
# SPDX-License-Identifier: MIT
#
# Copyright (c) 2022-2023 Anton Kuzmin <anton.kuzmin@cs.fau.de>

'''Command line tool to program, test, and control GMM-7550 module
connected via HAT adapter board to a VisionFive or Raspberry Pi SBC'''

__version__ = '0.1.0'

import time
import argparse
import gmm7550

parser = argparse.ArgumentParser(description = __doc__)

############################################################
#  Common options
############################################################

parser.add_argument('-V', '--version', action='version', version = '%(prog)s: ' + __version__ + ', GMM-7550 control library: ' + '0.1.0')
# parser.add_argument('-V', '--version', action='version', version = '%(prog)s: ' + __version__ + ', GMM-7550 control library: ' + gmm7550.__version__)

parser.add_argument('-v', '--verbose', action='store_true', help='be more verbose')

parser.add_argument('-b', '--board', type=str, choices=['visionfive', 'rpi', 'sim'],
                    default='rpi',
                    help='select target hardware configuration')

parser.add_argument('-p', '--pll-page', type=int, choices=[0, 1],
                    default=0,
                    help='PLL configuration EEPROM page')

parser.add_argument('-s', '--spi-sel', type=int,
                    choices=range(16), metavar='{0..15}',
                    default=0,
                    help='select SPI multiplexer configuration')

parser.add_argument('-m', '--mode', type=str,
                    choices=['spi_active', 'spi_passive', 'jtag'],
                    default='spi_active',
                    help='set FPGA configuration mode')

parser.add_argument('-S', '--spi-mode', type=int,
                    choices=range(4),
                    default=0,
                    help='SPI mode for SPI configuration')

cmd = parser.add_subparsers(title='Commands',
                            # dest='cmd',
                            )

############################################################
#  Commands
############################################################

command = { c : cmd.add_parser(c) for c in [
    'power',
    'on', 'off',
    'reset',
    'pll',
    'spi',
    'cfg',
    'id',
]}

############################################################
#  Power
############################################################

command['on'].set_defaults(func = lambda gmm, args: gmm.start())
command['off'].set_defaults(func = lambda gmm, args: gmm.poweroff())

############################################################
#  PLL
############################################################

c = command['pll']

c.epilog = 'Without any option: print PLL current configuration registers\n'

c.add_argument('-e', '--eeprom',
               action='store_true',
               help='Print content of the PLL configuration EEPROM')
# c.add_argument('-c', '--configure',
#                action='store_true',
#                help='Configure PLL register')
c.add_argument('-P', '--program',
               help='Program PLL EEPROM page',
               dest='pll_program',
               type=int, choices=[0, 1], default=None)

def prog_page(g, page):
    from gmm7550.cdce6214_eeprom import page0_gmm
    g.pll.write_eeprom_page(page, page0_gmm)

def cmd_pll(gmm, args):
    gmm.start()
    time.sleep(0.5)
    if args.pll_program == None:
        if args.eeprom:
            print(gmm.pll.eeprom_as_string())
        else:
            print(gmm.pll.configuration_as_string())
    else:
        prog_page(gmm, args.pll_program)
    # time.sleep(0.1)
    # gmm.poweroff()

c.set_defaults(func = cmd_pll)

############################################################
#  SPI NOR
############################################################

c = command['spi']

c.add_argument('-i', '--info',
               action='store_true',
               dest='spi_info',
               help='Print SPI NOR device info')

c.add_argument('-n', '--dry-run',
               action='store_false',
               dest='spi_execute',
               help='Print the commands that would be executed, but do not execute write and erase operations')

c.add_argument('-r', '--read',
               action='store_true',
               dest='spi_read',
               help='Read SPI NOR page(s) to file')

c.add_argument('-w', '--write',
               action='store_true',
               dest='spi_write',
               help='Write data from file to SPI NOR starting from the given page number')

c.add_argument('-e', '--erase',
               action='store_true',
               dest='spi_erase',
               help='Erase SPI NOR page(s)')

c.add_argument('-a', '--addr',
               dest='spi_addr', metavar='{address|from,to}',
               help='Use SPI NOR address or address range'
              )

c.add_argument('-p', '--page',
               dest='spi_page', metavar='{page|from,to}',
               help='Use SPI NOR page or range of pages'
              )

c.add_argument('-s', '--sector',
               dest='spi_sector', metavar='{sector|from,to}',
               help='Use SPI NOR sector or range of sectors'
              )

c.add_argument('-b', '--block32',
               dest='spi_block32', metavar='{block|from,to}',
               help='Use SPI NOR block (32KiB) or range of blocks'
              )

c.add_argument('-B', '--block64',
               dest='spi_block64', metavar='{block|from,to}',
               help='Use SPI NOR block (64KiB) or range of blocks'
              )

c.add_argument('-C', '--chip',
               action='store_true', dest='spi_chip',
               help='Use entire SPI NOR chip'
              )

c.add_argument('-f', '--file',
               help='Filename to read/write SPI NOR data'
              )

def cmd_spi(gmm, args):
    nor = gmm.spi.nor

    if not (args.spi_info or args.spi_read or
            args.spi_write or args.spi_erase):
        print('At least one action [info/read/write/erase] should be specified')
        return

    if (args.spi_read or args.spi_write) and (args.file is None):
        print('SPI NOR read and write operations require file to be specified with --file (-f)')
        return

    from enum import Enum, auto
    class AddrUnit(Enum):
        undefined = auto()
        chip = auto()
        addr = auto()
        page = auto()
        sector = auto()
        block32 = auto()
        block64 = auto()

    def try_addr(arg):
        if arg is None:
            return False, 0, None
        else:
            _addrs = arg.split(',')
            if len(_addrs) == 1:
                return True, int(_addrs[0]), None
            else:
                return True, int(_addrs[0]), int(_addrs[1])

    spi_start, spi_end, unit_size = 0, None, 0
    addr_unit = AddrUnit.undefined
    addr_error = False

    if args.spi_chip:
        addr_unit = AddrUnit.chip
        spi_start, spi_end = 0, nor.CHIP_SIZE-1
        unit_size = 1

    if not addr_error:
        _set, start, end = try_addr(args.spi_addr)
        addr_error = _set and addr_unit is not AddrUnit.undefined
        if _set and addr_unit is AddrUnit.undefined:
            addr_unit = AddrUnit.addr
            spi_start, spi_end = start, end
            unit_size = 1

    if not addr_error:
        _set, start, end = try_addr(args.spi_page)
        addr_error = _set and addr_unit is not AddrUnit.undefined
        if _set and addr_unit is AddrUnit.undefined:
            addr_unit = AddrUnit.page
            spi_start, spi_end = start, end
            unit_size = nor.PAGE_SIZE

    if not addr_error:
        _set, start, end = try_addr(args.spi_sector)
        addr_error = _set and addr_unit is not AddrUnit.undefined
        if _set and addr_unit is AddrUnit.undefined:
            addr_unit = AddrUnit.sector
            spi_start, spi_end = start, end
            unit_size = nor.SECTOR_SIZE

    if not addr_error:
        _set, start, end = try_addr(args.spi_block32)
        addr_error = _set and addr_unit is not AddrUnit.undefined
        if _set and addr_unit is AddrUnit.undefined:
            addr_unit = AddrUnit.block32
            spi_start, end = start, end
            unit_size = nor.BLOCK32_SIZE

    if not addr_error:
        _set, start, end = try_addr(args.spi_block64)
        addr_error = _set and addr_unit is not AddrUnit.undefined
        if _set and addr_unit is AddrUnit.undefined:
            addr_unit = AddrUnit.block64
            spi_start, spi_end = start, end
            unit_size = nor.BLOCK64_SIZE

    if addr_error:
        print('SPI NOR address or address range should be specified only once, (-a, -p, -s, -b, -B, -C options are mutually exclusive)')
        return

    if addr_unit is AddrUnit.undefined and (args.spi_read or
                                            args.spi_write or
                                            args.spi_erase):
        print('SPI NOR address should be specified for read, write, and erase operations with one of the options: -a, -p, -s, -b, -B, -C')
        return

    spi_start_addr = spi_start * unit_size

    if spi_end is None:
        spi_end_addr = spi_start_addr + unit_size - 1
    else:
        spi_end_addr = (spi_end + 1) * unit_size - 1

    print('SPI NOR address range for operation: 0x%x..0x%x' % (spi_start_addr, spi_end_addr))

    if spi_end_addr > nor.CHIP_SIZE:
        print('End address is greater than the SPI NOR chip size')
        return

    gmm.start()
    time.sleep(0.1)

    if args.spi_info:
        gmm.spi.print_info()

    if args.spi_erase:

        if addr_unit is AddrUnit.chip:
            print('Chip erase')
            if args.spi_execute:
                gmm.spi.chip_erase()
        else:
            if (addr_unit is AddrUnit.sector or
                addr_unit is AddrUnit.addr or
                addr_unit is AddrUnit.page):
                unit_size = nor.SECTOR_SIZE
                spi_start_addr &= ~(unit_size - 1)
                spi_end_addr &= ~(unit_size - 1)
                for a in range(spi_start_addr, spi_end_addr+1, unit_size):
                    print('Erase sector: 0x%x' % a)
                    if args.spi_execute:
                        gmm.spi.sector_erase(a)

            if addr_unit is AddrUnit.block32:
                for a in range(spi_start_addr, spi_end_addr+1, unit_size):
                    print('Erase block32: 0x%x' % a)
                    if args.spi_execute:
                        gmm.spi.block32_erase(a)

            if addr_unit is AddrUnit.block64:
                for a in range(spi_start_addr, spi_end_addr+1, unit_size):
                    print('Erase block64: 0x%x' % a)
                    if args.spi_execute:
                        gmm.spi.block64_erase(a)

    if args.spi_write:
        with open(args.file, mode='br') as f:
            data = f.read()
        data_len = len(data)

        if spi_end_addr - spi_start_addr + 1 < data_len:
            print('File size is bigger than specified range')
        else:
            addr = spi_start_addr
            page_size = nor.PAGE_SIZE
            if args.spi_execute:
                for p in range(data_len // page_size + 1):
                    bytes = list(data[addr : addr+page_size])
                    gmm.spi.write_page(addr, bytes)
                    addr += page_size

    if args.spi_read:
        with open(args.file, mode='bw') as f:
            page_size = nor.PAGE_SIZE
            tail = (spi_end_addr - spi_start_addr + 1) % page_size
            for p in range((spi_end_addr - spi_start_addr + 1) // page_size):
                b = gmm.spi.read(p * page_size, page_size)
                f.write(bytearray(b))
            if tail > 0:
                b = gmm.spi.read((p+1) * page_size, tail)
                f.write(bytearray(b))

    gmm.poweroff()

c.set_defaults(func = cmd_spi)

############################################################
# Configure FPGA (in SPI Passive mode)
############################################################

c = command['cfg']

c.add_argument('-f', '--file',
               help='Filename with FPGA configuration bitstream'
              )

def cmd_cfg(gmm, args):
    if args.file is None:
        print('Configuration command requires file to be specified with --file (-f)')
        return
    gmm.start()
    time.sleep(0.1)

    with open(args.file, mode='br') as f:
        data = f.read()

    gmm.spi.cfg(list(data))

c.set_defaults(func = cmd_cfg)

############################################################
from gmm7550 import gatemate

if __name__ == '__main__':
    args = parser.parse_args()
    config = gmm7550.Config(args.board)
    config.pll_page = args.pll_page
    config.spi_sel = args.spi_sel

    if args.mode == 'spi_active':
        config.cfg_mode = gatemate.CFG_mode.SPI_ACTIVE.value | args.spi_mode
    elif args.mode == 'spi_passive':
        config.cfg_mode = gatemate.CFG_mode.SPI_PASSIVE.value | args.spi_mode
    elif args.mode == 'jtag':
        config.cfg_mode = gatemate.CFG_mode.JTAG.value

    gmm = gmm7550.GMM7550(config)

    if 'func' in vars(args):
        args.func(gmm, args)
    else:
        print(args)
